plugins {
    id 'java'
    id 'org.springframework.boot' version '2.2.5.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'eclipse'
    id 'jacoco'
    id 'org.sonarqube' version '3.3'
    id 'maven-publish'
}

group = 'com.iexec.result-proxy'
sourceCompatibility = 11
targetCompatibility = 11

ext {
    springCloudVersion = 'Hoxton.SR3'
    gitBranch = 'git rev-parse --abbrev-ref HEAD'.execute().text.trim()
}

if (gitBranch != 'main' && gitBranch != 'master' && ! (gitBranch ==~ '(release|hotfix|support)/.*')) {
    version += '-NEXT-SNAPSHOT'
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url 'https://nexus.iex.ec/repository/maven-public/'
    }
    maven {
        url 'https://jitpack.io'
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {
    // iexec
    implementation "com.iexec.common:iexec-common:${iexecCommonVersion}"

    // Web3j issues, see core build.gradle
    implementation 'com.squareup.okhttp3:okhttp:4.3.1'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.3.50'

    // spring
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    implementation "org.springframework.retry:spring-retry"

    // test
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.mockito:mockito-inline:2.13.0' // activates mocking final classes/methods

    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // swagger
    implementation 'io.springfox:springfox-swagger2:2.9.2'
    implementation 'io.springfox:springfox-swagger-ui:2.9.2'

    // ipfs
    implementation 'com.github.ipfs:java-ipfs-http-client:1.3.3'

    // json web token
    implementation 'io.jsonwebtoken:jjwt:0.7.0'

    // expiring map
    implementation 'net.jodah:expiringmap:0.5.8'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

springBoot {
    buildInfo()
}

test {
    useJUnitPlatform()
}

task itest {
    group 'Verification'
    description 'Runs the integration tests.'
}

// the test coverage report is
// created just before the build
jacoco {
    toolVersion = "0.8.7"
}
// sonarqube code coverage requires jacoco XML report
jacocoTestReport {
    reports {
        xml.enabled true
    }
}
tasks.test.finalizedBy    tasks.jacocoTestReport
tasks.sonarqube.dependsOn tasks.jacocoTestReport

// ######################
// #   create version   #
// ######################

task createVersion (type: Exec) {
    description 'Set version in application.yml'
    commandLine('sh', '-c', "sed -i 's/^version.*/version: ${version}/' src/main/resources/application.yml")
}

compileJava.dependsOn createVersion

// ######################
// #   upload archive   #
// ######################

publishing {
    publications {
        maven(MavenPublication) {
            artifact bootJar
            from components.java
        }
    }
    repositories {
        maven {
            credentials {
                username project.hasProperty('nexusUser') ? nexusUser : ''
                password project.hasProperty('nexusPassword') ? nexusPassword : ''
            }
            url project.hasProperty('nexusUrl') ? nexusUrl : ''
        }
    }
}

ext.bootJarPath    = relativePath(tasks.bootJar.outputs.files.singleFile)
ext.gitShortCommit = 'git rev-parse --short=8 HEAD'.execute().text.trim()
ext.ociImageName   = 'local/' + ['bash', '-c', 'basename $(git config --get remote.origin.url) .git'].execute().text.trim()

task buildImage(type: Exec) {
    group       'Build'
    description 'Builds an OCI image from a Dockerfile.'
    dependsOn   tasks.bootJar
    commandLine ("sh", "-c", "docker build --build-arg spring_boot_jar=$bootJarPath -t $ociImageName:$gitShortCommit ."
            + " && docker tag $ociImageName:$gitShortCommit $ociImageName:dev")
}
