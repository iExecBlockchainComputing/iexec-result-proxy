plugins {
    id 'java'
    id 'org.springframework.boot' version '2.2.5.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'eclipse'
    id 'jacoco'
    id 'org.sonarqube' version '2.7'
    id 'maven-publish'
    id 'com.palantir.docker' version '0.25.0'
    // id 'com.palantir.graal' version '0.6.0-112-gca0b727'
}

group = 'com.iexec.result-proxy'
sourceCompatibility = 11
targetCompatibility = 11

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url 'https://nexus.iex.ec/repository/maven-public/'
    }
    maven {
        url 'https://jitpack.io'
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

ext {
    set('springCloudVersion', 'Hoxton.SR3')
}

dependencies {
    // iexec
    implementation "com.iexec.common:iexec-common:${iexecCommonVersion}"

    // Web3j issues, see core build.gradle
    implementation 'com.squareup.okhttp3:okhttp:4.3.1'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.3.50'

    // spring
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

    // test
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.mockito:mockito-inline:2.13.0' // activates mocking final classes/methods

    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // swagger
    implementation 'io.springfox:springfox-swagger2:2.9.2'
    implementation 'io.springfox:springfox-swagger-ui:2.9.2'

    // ipfs
    implementation 'com.github.ipfs:java-ipfs-http-client:1.3.3'

    // json web token
    implementation 'io.jsonwebtoken:jjwt:0.7.0'

    // expiring map
    implementation 'net.jodah:expiringmap:0.5.8'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

test {
    useJUnitPlatform()
}

// the test coverage report is
// created just before the build
jacoco {
    toolVersion = "0.8.3"
}
// sonarqube code coverage requires jacoco XML report
jacocoTestReport {
    reports {
        xml.enabled true
    }
}
tasks.test.finalizedBy    tasks.jacocoTestReport
tasks.sonarqube.dependsOn tasks.jacocoTestReport

// ######################
// #     build meta     #
// ######################

def gitBranch = 'git name-rev --name-only HEAD'.execute().text.trim()
def isMasterBranch = gitBranch == 'master'
def isDevelopBranch = gitBranch == 'develop'
def isSnapshotVersion = project.version.contains('SNAPSHOT')

def nexusUser = project.hasProperty('nexusUser') ? project.getProperty('nexusUser') : ''
def nexusPassword = project.hasProperty('nexusPassword') ? project.getProperty('nexusPassword') : ''
def hasNexusProperties = !nexusUser.isEmpty() && !nexusPassword.isEmpty()

def canUploadArchives = (isMasterBranch || isDevelopBranch ) && hasNexusProperties
def canPushDockerImage = (isMasterBranch || isDevelopBranch ) && hasNexusProperties
def canBuildDockerImage = isMasterBranch || isDevelopBranch || project.hasProperty('forceDockerBuild')

// ######################
// #   create version   #
// ######################

task createVersion (type: Exec) {
    description 'Set version in application.yml'
    commandLine('sh', '-c', "sed -i 's/^version.*/version: ${version}/' src/main/resources/application.yml")
}

compileJava.dependsOn createVersion

// ######################
// #   upload archive   #
// ######################

project.ext.getNexusMaven = {
    def nexusMavenBase = 'https://nexus.iex.ec/repository'
    if (isSnapshotVersion) {
        return nexusMavenBase + '/maven-snapshots/'
    } else {
        return nexusMavenBase + '/maven-releases/'
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact bootJar
            from components.java
        }
    }
    repositories {
        maven {
            credentials {
                username nexusUser
                password nexusPassword
            }
            url getNexusMaven
        }
    }
}

publish.enabled = canUploadArchives

// ######################
// #	  docker        #
// ######################

// build, tag & push image
// ./gradlew docker dockerTagDev dockerTagsPush

def dockerImageBaseName = 'nexus.iex.ec/iexec-result-proxy'
def gitShortCommit = 'git rev-parse --short HEAD'.execute().text.trim()
def dockerImageTag = isSnapshotVersion ? "${version}-${gitShortCommit}" : version

docker {
    name 					"${dockerImageBaseName}:${dockerImageTag}"
    tag 'FullTag', 			"${dockerImageBaseName}:${dockerImageTag}"
    tag 'ShortCommitTag',	"${dockerImageBaseName}:${gitShortCommit}"
    tag 'Dev',				"${dockerImageBaseName}:dev"
    dockerfile file('Dockerfile')
    files "build/libs/iexec-result-proxy-${project.version}.jar"
    buildArgs([BUILD_VERSION: project.version])
}

task buildImage {
    enabled = canBuildDockerImage
    dependsOn tasks.docker
}

// docker build
tasks.docker {
    enabled = canBuildDockerImage
}

task pushImage {
    enabled = canPushDockerImage
    dependsOn dockerTagsPush
}

// docker login
task dockerLogin(type: Exec) {
    enabled = canPushDockerImage
    commandLine('sh', '-c', "docker login -u ${nexusUser} -p ${nexusPassword} nexus.iex.ec")
}

// docker logout
task dockerLogout(type: Exec) {
    enabled = canPushDockerImage
    commandLine('sh', '-c', 'docker logout nexus.iex.ec')
}

// docker push
dockerTagsPush {
    enabled = canPushDockerImage
    // shouldRunAfter tasks.docker
    dependsOn dockerLogin
    finalizedBy dockerLogout
}

afterEvaluate {
    // don't tag if image is not build
    for(t in tasks.findAll{e -> e.name.contains("dockerTag")}) {
        t.enabled = canBuildDockerImage
    }
    // don't push tags if canPushDockerImage == false
    // (dockerPushFullTag, dockerPushShortCommitTag)
    def dockerPushTasks = tasks.findAll{t -> t.name.contains("dockerPush")}
    for(t in dockerPushTasks) {
        t.enabled = canPushDockerImage
    }
    // don't push dev tag
    dockerPushDev.enabled = false

    // create :dev tag after image build
    buildImage.dependsOn dockerTagDev
}
